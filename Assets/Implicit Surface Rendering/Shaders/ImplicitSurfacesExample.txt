#if !defined(IS_IMPLICIT_SURFACE)
#define IS_IMPLICIT_SURFACE

// Implicit surface function definition

float implicitSurface(float3 p)
{
    // Scale and transform the point
    p *= _ScaleFactor * _Scale;
    p -= _Position;

    float w = _Param1;
    float x = p.x;
    float y = p.z;
    float z = p.y;

    float x2 = x*x;
    float x3 = x2*x;
    float x4 = x2*x2;

    float y2 = y*y;
    float y4 = y2*y2;

    float z2 = z*z;
    float z4 = z2*z2;

    float w2 = w*w;
    float w3 = w2*w;
    float w4 = w2*w2;
    /*
    float a = x+y+z-w;
    float b = -x-y+z-w;
    float c = x-y-z-w;
    float d = -x+y-z-w;
    float e = (x2+y2+z2-3*w);
    return e*e-a*b*c*d;
    */

    /*
    float a = (x+w)*(x+w)+y2;
    float b = (x-w)*(x-w)+y2;
    float c = (x2+y2+w2)*(x2+y2+w2) - 4*w2*x2;
    float d =-z4;

    return a*b*c+d;
    */





    //float a = 64 *(x-w) * (x4 - 4*x3*w - 10*x2*y2 - 4*x2*w2 + 16*x*w3 - 20*x*y2*w + 5*y4 + 16*w4 - 20*y2*w2) - 5*sqrt(5-sqrt(5))*(2*z - sqrt(5-sqrt(5))*w) * (4*(x2+y2-z2) + (1 + 3*sqrt(5))*w2) *(4*(x2+y2-z2) + (1 + 3*sqrt(5))*w2);
    //return -a;


    float w2 = w*w;
    float w3 = w2*w;
    float w4 = w2*w2;

p *= _ScaleFactor * _Scale;
p -= _Position;

float x = p.x;
float y = p.z;
float z = p.y;
float w = _Param1;

float x2 = x*x;
float x3 = x2*x;
float x4 = x2*x2;

float y2 = y*y;
float y4 = y2*y2;

float z2 = z*z;
float z4 = z2*z2;

float w2 = w*w;
float w3 = w2*2;
float w4 = w2*w2;

float term = 64 *(x-w) * (x4 - 4*x3*w - 10*x2*y2 - 4*x2*w2 + 16*x*w3 - 20*x*y2*w + 5*y4 + 16*w4 - 20*y2*w2) - 5*sqrt(5-sqrt(5))*(2*z - sqrt(5-sqrt(5))*w) * (4*(x2+y2-z2) + (1 + 3*sqrt(5))*w2) *(4*(x2+y2-z2) + (1 + 3*sqrt(5))*w2);
return term;


return term1*term1 - lambda * p0 * q0 * r0 * s0;
